{% extends "_layout/index.html.twig" %}

{% block head %}
	{{ parent() }}
{% endblock %}

{% block content %}
	<div class="page-header">
		<h1>'{{device.name}}' Details</h1>
	</div>
	<ol class="breadcrumb">
        <li>
            <a href="/dashboard"><i class="fa fa-dashboard"></i>  Dashboard</a>
        </li>
        <li class="active">
            <a href="/devices"><i class="fa fa-list"></i> Devices</a>
        </li>
        <li class="active">
            <i class="fa fa-area-chart"></i> Details
        </li>
    </ol>
	<div class="container">
		<div class="row">

			<div class="col-lg-4 col-md-6">
				<div class="panel panel-primary">
					<div class="panel-heading">
						<div class="row">
							<div class="col-xs-3">
								<i class="fa fa-bolt fa-5x"></i>
							</div>
							<div class="col-xs-9 text-right">
								<div class="huge" id="vrms">{{vrms}}</div>
								<div>Volt{{vrms==1?'':'s'}} RMS</div>
							</div>
						</div>
					</div>
				</div>
			</div>

			<div class="col-lg-4 col-md-6">
				<div class="panel panel-primary">
					<div class="panel-heading">
						<div class="row">
							<div class="col-xs-3">
								<i class="fa fa-bolt fa-5x"></i>
							</div>
							<div class="col-xs-9 text-right">
								<div class="huge" id="irms">{{irms}}</div>
								<div>Amp{{irms==1?'':'s'}} RMS</div>
							</div>
						</div>
					</div>
				</div>
			</div>

			<!-- <div class="col-lg-2 col-md-6">
				<div class="panel panel-primary">
					<div class="panel-heading">
						<div class="row">
							<div class="col-xs-3">
								<i class="fa fa-bolt fa-5x"></i>
							</div>
							<div class="col-xs-9 text-right">
								<div class="huge" id="real">{{real}}</div>
								<div style="margin-left: -10px;">Real Power</div>
							</div>
						</div>
					</div>
				</div>
			</div> -->

			<!-- <div class="col-lg-2 col-md-6">
				<div class="panel panel-primary">
					<div class="panel-heading">
						<div class="row">
							<div class="col-xs-3">
								<i class="fa fa-bolt fa-5x"></i>
							</div>
							<div class="col-xs-9 text-right">
								<div class="huge" id="powerfactor">{{powerfactor}}</div>
								<div style="margin-left: -10px;">Power Factor</div>
							</div>
						</div>
					</div>
				</div>
			</div> -->

			<div class="col-lg-4 col-md-6">
				<div class="panel panel-primary">
					<div class="panel-heading">
						<div class="row">
							<div class="col-xs-3">
								<i class="fa fa-bolt fa-5x"></i>
							</div>
							<div class="col-xs-9 text-right">
								<div class="huge" id="apparent">{{apparent}}</div>
								<div style="margin-left: -10px;">Apparent Power</div>
							</div>
						</div>
					</div>
				</div>
			</div>

			<!-- <div class="col-lg-2 col-md-6">
				<div class="panel panel-primary">
					<div class="panel-heading">
						<div class="row">
							<div class="col-xs-3">
								<i class="fa fa-bolt fa-5x"></i>
							</div>
							<div class="col-xs-9 text-right">
								<div class="huge">{{kWhToday}}</div>
								<div style="margin-left: -10px;">kWh{{kWhToday==1?'':'s'}} today</div>
							</div>
						</div>
					</div>
				</div>
			</div> -->

		</div>

		<div class="panel panel-default">
	        <div class="panel-heading">
	            <i class="fa fa-bar-chart-o fa-fw"></i> Historical Power Consumption for '{{device.name}}'
	        </div>

	        <div class="panel-body">
	            <canvas id="powerHist" width="616" height="308"></canvas>
	        </div>

	    </div>

	    <div class="panel panel-default">
	        <div class="panel-heading">
	            <i class="fa fa-plug fa-fw"></i> Outlet control for '{{device.name}}'
	        </div>

	        <div class="panel-body">

				<div style="display:inline-block">

					<!-- <div class="container"> -->
				        <div class="row">
					        <div class="col-md-5">
					        	<img src="{{static}}/img/outlet.svg" alt="Outlet" style="width:100%">
					        </div>
				            <div class="col-md-2">

					            <div class="panel panel-default" style="display:inline-block">
							        <div class="panel-heading">
							            <i class="fa fa-plug fa-fw"></i> Outlet 1
							        </div>
							        <div class="panel-body">
							            <input class="switch" id="outlet1" type="checkbox" name="my-checkbox">
							        </div>
							    </div>

							    <div class="panel panel-default" style="display:inline-block">
							        <div class="panel-heading">
							            <i class="fa fa-plug fa-fw"></i> Outlet 2
							        </div>
							        <div class="panel-body">
							            <input class="switch" id="outlet2" type="checkbox" name="my-checkbox">
							        </div>
							    </div>
						    </div>
						</div>
					<!-- </div> -->
			    </div>

	        </div>

	    </div>

	</div>
	<div>
		<ul class="test"></ul>
	</div>
	<script src="http://localhost:2648/socket.io/socket.io.js"></script>
	<script>
	  var socket = io('http://localhost:2648/');
	  socket.on('connect', function () {
	  	console.log("Connected to SocketIO Server");
	  	socket.emit('who', '{{device.core_id}}'); //tell the server what core we are interested in live data for

	  	socket.emit('status'); //request information about socket status

	  	//Handle the status reply
	    socket.on('status', function (sockets) {
	    	for (var id in sockets) {
				var state = sockets[id];
				$('input[name="my-checkbox"]#'+id).bootstrapSwitch('indeterminate',false); //clear the initial indeterminate state.
				$('input[name="my-checkbox"]#'+id).bootstrapSwitch('state',state=="on", true);// set the accurate state based on data from the server.
			}
	    });

	    socket.on('data', function (data) {
	    	// console.log(data);

	    	$('#vrms').text(data.vrms);
	    	$('#irms').text(data.irms);
	    	$('#real').text(data.real);
	    	$('#powerfactor').text(data.pf);
	    	$('#apparent').text(data.apparent);
	    });
	  });
	</script>
{% endblock %}

{% block foot %}
	{{ parent() }}
	<script type="text/javascript">
	$(document).ready(function(){
		// console.log($(".switch"));
		$('input[name="my-checkbox"]').bootstrapSwitch({
			indeterminate: true, //start the switch in the indeterminate state until we get word from the server.
			onSwitchChange: function (event, state, test) {
				//when the switch is clicked send the state information to the server.
				var data = {
					core: "{{device.core_id}}",
					outlet: event.target.id,
					state: (state?'on':'off')
				};
				socket.emit('control', data); //Tell the server the state has changed
			}
		});
	});
	</script>
	<script>
	$(document).ready(function(){
		console.log("here1");
		// set up the timeout variable
		var t;
		// setup the sizing function,
		// with an argument that tells the chart to animate or not
		function size(animate){
		    // If we are resizing, we don't want the charts drawing on every resize event.
		    // This clears the timeout so that we only run the sizing function
		    // when we are done resizing the window
		    clearTimeout(t);
		    // This will reset the timeout right after clearing it.
		    t = setTimeout(function(){
		        $("canvas").each(function(i,el){
		            // Set the canvas element's height and width to it's parent's height and width.
		            // The parent element is the div.canvas-container
		            $(el).attr({
		                "width":$(el).parent().width(),
		                "height":$(el).parent().outerHeight()
		            });
		        });
		        // kickoff the redraw function, which builds all of the charts.
		        redraw(animate);

		        // loop through the widgets and find the tallest one, and set all of them to that height.
		        var m = 0;
		        // we have to remove any inline height setting first so that we get the automatic height.
		        // $(".widget").height("");
		        // $(".widget").each(function(i,el){ m = Math.max(m,$(el).height()); });
		        // $(".widget").height(m);

		    }, 100); // the timeout should run after 100 milliseconds
		}
		$(window).on('resize', size);
		function redraw(animation){
		    var options = {};
		    if (!animation){
		        options.animation = false;
		    } else {
		        options.animation = true;
		    }
		    // ....
	        // the rest of our chart drawing will happen here
	        var data = {
			    labels: ["a","b","c"],
			    datasets: [
			        {
			            label: "Current RMS",
			            fillColor: "rgba(220,220,220,0.2)",
			            strokeColor: "rgba(220,220,220,1)",
			            pointColor: "rgba(220,220,220,1)",
			            pointStrokeColor: "#fff",
			            pointHighlightFill: "#fff",
			            pointHighlightStroke: "rgba(220,220,220,1)",
			            data: [0,0,0]
			        }
			    ]
			};
			var ctx = $("#powerHist").get(0).getContext("2d");
			var myLineChart = new Chart(ctx).Line(data, {
			    bezierCurve: false,
			    showTooltips: true,
			    tooltipEvents: ["mousemove", "touchstart", "touchmove"],
			    // responsive: true
			});
			console.log("here");
			socket.on('data', function (data){
				myLineChart.addData([data.irms], "");
			});
		    // ....
		}
		size(); // this kicks off the first drawing; note that the first call to size will animate the charts in.



	});
	</script>
{% endblock %}